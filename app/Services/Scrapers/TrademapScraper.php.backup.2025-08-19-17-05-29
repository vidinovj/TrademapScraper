<?php
// app/Services/Scrapers/TrademapScraper.php
// FINAL CLEAN VERSION - No debug code, uses working fixed script

namespace App\Services\Scrapers;

use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;
use Exception;

class TrademapScraper
{
    protected string $baseUrl = 'https://www.trademap.org';
    protected array $config;

    public function __construct()
    {
        $this->config = [
            'timeout' => 180,
            'retries' => 3
        ];
    }

    /**
     * Scrape ALL years of Indonesia trade data in ONE optimized request
     */
    public function scrapeIndonesiaTradeData(): array
    {
        Log::info('Starting optimized Trademap scraping for Indonesia trade data');
        
        try {
            $url = $this->buildTrademapUrl();
            $allYearsData = $this->executePuppeteerScraping($url);
            
            return $this->processMultiYearData($allYearsData);
            
        } catch (Exception $e) {
            Log::error("Error in optimized scraping: " . $e->getMessage());
            return [];
        }
    }

    /**
     * Build Trademap URL
     */
    protected function buildTrademapUrl(): string
    {
        $baseUrl = 'https://www.trademap.org/Product_SelCountry_TS.aspx';
        
        $params = [
            'nvpm' => '1|360||||TOTAL|||2|1|1|1|2|1|1|1||1',
            'dlang' => 'en'
        ];
        
        $queryString = http_build_query($params);
        $fullUrl = "{$baseUrl}?{$queryString}";
        
        Log::info("Built Trademap URL: {$fullUrl}");
        
        return $fullUrl;
    }

    /**
     * Execute SINGLE Puppeteer scraping using the WORKING fixed script
     */
    protected function executePuppeteerScraping(string $url): ?string
    {
        try {
            $puppeteerScript = base_path('storage/app/fixed_trademap_scraper.cjs');
            
            if (!file_exists($puppeteerScript)) {
                Log::error("Fixed Puppeteer script not found at: {$puppeteerScript}");
                return null;
            }
            
            $command = sprintf(
                'node %s %s 2>&1',
                escapeshellarg($puppeteerScript),
                escapeshellarg($url)
            );
            
            Log::info("Executing fixed Puppeteer command");
            
            $output = [];
            $returnCode = 0;
            exec($command, $output, $returnCode);
            
            Log::info("Puppeteer exit code: {$returnCode}");
            
            if ($returnCode !== 0) {
                Log::error("Puppeteer process failed with exit code: {$returnCode}");
                Log::error("Output: " . implode("\n", $output));
                return null;
            }
            
            // Find temp file path in output
            $tempFile = null;
            foreach ($output as $line) {
                if (strpos($line, '/tmp/trademap_fixed_') !== false && strpos($line, '.json') !== false) {
                    $tempFile = trim($line);
                    Log::info("Found temp file: {$tempFile}");
                    break;
                }
            }
            
            if (!$tempFile || !file_exists($tempFile)) {
                Log::error("No temp file created. Output: " . implode("\n", $output));
                return null;
            }
            
            $jsonData = file_get_contents($tempFile);
            unlink($tempFile); // Clean up
            
            if (empty($jsonData)) {
                Log::error("Empty JSON data in temp file");
                return null;
            }
            
            $decoded = json_decode($jsonData, true);
            if (json_last_error() !== JSON_ERROR_NONE) {
                Log::error("Invalid JSON: " . json_last_error_msg());
                return null;
            }
            
            Log::info("Successfully read " . count($decoded) . " records from Puppeteer");
            return $jsonData;
            
        } catch (Exception $e) {
            Log::error("Puppeteer execution failed: " . $e->getMessage());
            return null;
        }
    }

    /**
     * Process scraped multi-year data into individual year records
     */
    protected function processMultiYearData(?string $rawData): array
    {
        if (empty($rawData)) {
            Log::error("Empty raw data");
            return [];
        }
        
        try {
            $scrapedData = json_decode($rawData, true);
            
            if (!is_array($scrapedData)) {
                Log::error("Invalid JSON data structure");
                return [];
            }
            
            Log::info("Processing " . count($scrapedData) . " product records");
            
            $processedData = [];
            $years = [2020, 2021, 2022, 2023, 2024];
            
            foreach ($scrapedData as $item) {
                $hsCode = trim($item['hsCode'] ?? '');
                $productLabel = trim($item['productLabel'] ?? '');
                
                if (!empty($hsCode) && !empty($productLabel)) {
                    // Create a record for EACH year
                    foreach ($years as $year) {
                        $yearKey = "value{$year}";
                        $importedValue = is_numeric($item[$yearKey] ?? 0) ? (float)$item[$yearKey] : 0.0;
                        
                        $processedData[] = [
                            'negara' => 'Indonesia',
                            'kode_hs' => $hsCode,
                            'label' => $productLabel,
                            'tahun' => $year,
                            'jumlah' => $importedValue,
                            'satuan' => 'USD thousands',
                            'sumber_data' => 'Trademap',
                            'scraped_at' => now()
                        ];
                    }
                }
            }
            
            Log::info("Processed into " . count($processedData) . " year-specific records");
            return $processedData;
            
        } catch (Exception $e) {
            Log::error("Error processing data: " . $e->getMessage());
            return [];
        }
    }

    /**
     * Save data to database
     */
    public function saveToDatabase(array $tradeData): int
    {
        if (empty($tradeData)) {
            return 0;
        }
        
        try {
            $chunks = array_chunk($tradeData, 1000);
            $totalInserted = 0;
            
            DB::transaction(function () use ($chunks, &$totalInserted) {
                foreach ($chunks as $chunk) {
                    DB::table('tb_trade')->insert($chunk);
                    $totalInserted += count($chunk);
                }
            });
            
            Log::info("Successfully saved {$totalInserted} records to database");
            return $totalInserted;
            
        } catch (Exception $e) {
            Log::error("Database save error: " . $e->getMessage());
            return 0;
        }
    }

    /**
     * Main execution method
     */
    public function execute(): array
    {
        $startTime = microtime(true);
        
        try {
            $tradeData = $this->scrapeIndonesiaTradeData();
            
            if (empty($tradeData)) {
                return [
                    'success' => false,
                    'message' => 'No data scraped',
                    'records_scraped' => 0,
                    'records_saved' => 0
                ];
            }
            
            $recordsSaved = $this->saveToDatabase($tradeData);
            $executionTime = microtime(true) - $startTime;
            
            return [
                'success' => true,
                'message' => 'Scraping completed successfully',
                'records_scraped' => count($tradeData),
                'records_saved' => $recordsSaved,
                'execution_time' => round($executionTime, 2),
                'years_processed' => [2020, 2021, 2022, 2023, 2024]
            ];
            
        } catch (Exception $e) {
            Log::error("Scraping execution failed: " . $e->getMessage());
            
            return [
                'success' => false,
                'message' => 'Scraping failed: ' . $e->getMessage(),
                'records_scraped' => 0,
                'records_saved' => 0
            ];
        }
    }
}